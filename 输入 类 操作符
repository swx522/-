C++
1 输入
** 1.1 getline
1.1.1 头文件
#include <string>

1.1.2 功能
接收一串字符串

1.1.3 例子 
string str;
getline(cin,str);
cout<<str<<endl;

输入：abcd bb
输出：abcd bb **

** 2 类
2.1.1 public // 公共的行为或属性
    private // 私密的行为或属性

2.1.2 成员函数

2.1.2.1 类定义时同时实现 例子
class Point
{
    public:
    void setPoint(int x, int y) // 实现setPoint函数
    {
        xPos = x;
        yPos = y;
    }
 
    void printPoint() // 实现printPoint函数
    {
        cout<< "x = " << xPos << endl;
        cout<< "y = " << yPos << endl;
    }
 
    private:
       int xPos;
       int yPos;
};
 
int main()
{
    Point M; // 用定义好的类创建一个对象 点M
    M.setPoint(10, 20); // 设置 M点 的x,y值
    M.printPoint(); // 输出 M点 的信息
 
    return 0;
}

输出：
x = 10 
y = 20

2.1.2.2 类外定义成员函数 例子
class Point
{
    public:
    void setPoint(int x, int y); // 在类内对成员函数进行声明
    void printPoint();

    private:
    int xPos;
    int yPos;
};
 
void Point::setPoint(int x, int y) // 通过作用域操作符 '::' 实现setPoint函数
{
    xPos = x;
    yPos = y;
}
 
void Point::printPoint() // 实现printPoint函数
{
    cout<< "x = " << xPos << endl;
    cout<< "y = " << yPos << endl;
}
 
int main()
{
    Point M; // 用定义好的类创建一个对象 点M
    M.setPoint(10, 20); // 设置 M点 的x,y值
    M.printPoint(); // 输出 M点 的信息
 
    return 0;
}

2.1.3 类对象的定义
#include <string>

class A
{
private:
    int n2;
    int n1;
 
public:
    A() :n2(34), n1(n2+1) {} // 或A(int k1,int k2):n2(k2),n1(k1){}
 
    void Print() 
    {
        cout << "n1:" << n1 << ", n2: " << n2 << endl;
    }
};
 
int main()
{
    A a; // 或A a(23,76)
    a.Print();
    getchar();

    return 0;
}

2.2 类数组
#define MAXLEN 10

class Array
{
	private:
		int items[MAXLEN];

	public:
		Array()
    {
      memset(items,0,sizeof(items));
		}
		~Array()
    {
		} // 这个类没有用到堆区内存，析构函数什么都不做
		
    // 在函数中可以判断数组下标ii的合法性
		int& operator[](int ii){return items[ii];} // 重载操作符[]，形参是数组下标，可以修改数组中的元素
		const int& operator[](int ii)const
    {
    return items[ii];
    } // 重载操作符[]，形参是数组下标，不可以修改数组中的元素		
};

int main()
{
	Array aa; // 创建模板类Array的对象
	aa[0]=5;
  aa[1]=8;
  aa[2]=3;
  aa[3]=2;
  aa[4]=7;
	for(int ii=0;ii<5;ii++)
  {
    cout<<"a["<<ii<<"]="<<aa[ii]<<endl;
	}

  return 0;
}

2.3 构造函数 析构函数 拷贝函数 
2.3.1 析构函数
2.3.1.1 作用
清理对象

2.3.1.2 例子
class Person
{
public:
	Person()
	{
		cout << "调用构造函数" << endl;
	}
	~Person() // 对象销毁前，自动调用
	{
		cout << "析构函数的调用" << endl;
	}
};

void test()
{
	//创建对象
	Person  p; // 这是一个局部变量，test执行完毕后会释放该对象 进而调用析构函数
}

int main()
{
	Person  p1; // 如果在main函数创建对象，析构函数会在按任意键后再调用
	test();
	system("pause");
	return 0;
}

2.3.2 无参构造函数 有参构造函数 拷贝函数 例子
class Person
{
public:
	Person()
	{
		cout << "调用无参（默认）构造函数" << endl;
	}
	Person(int a)
	{
		age = a;
		cout << "调用有参构造函数" << endl;
	}
	// 拷贝构造函数用于拷贝传入的类到自身类上 
	// 除了拷贝构造函数外都是普通构造函数
	Person(const Person& p) // 传入的类不希望被改变所以加const 传入引用用p指向该类
	{
		age = p.age;
		cout << "调用拷贝构造函数" << endl;
	}
	~Person()
	{
		cout << "析构函数的调用" << endl;
	}
	int age;

};
void test()
{
	// 调用
	// 1.括号法
	// 注意：调用无参构造时不要输入()
	// Person p();会被编译器认为是函数的声明
	Person p; // 调用无参构造函数
	Person p1(10); // 调用有参函数构造
	Person p2(p1); // 调用拷贝构造函数
	cout << "p1的年龄" << p1.age << endl;
	cout << "p2的年龄" << p2.age << endl;

	// 2.显式法
	Person p3; // 调用无参构造函数
	Person p4 = Person(10); // 调用有参函数构造
	Person p5 = Person(p1); // 调用拷贝构造函数
	// Person(10)为匿名对象 等号左侧就是它的名 
	// 特点：当前行结束时，系统会立即回收掉匿名对象 即它的析构函数会在该行结束后就调用而不是test函数结束

	//3.隐式转换法
	Person p6 = 10; // 调用有参函数构造 相当于Person p6=Person(10);  假如有两个参数就是 Person p6 = (10,9);
	Person p7 = p1; // 调用拷贝构造函数 相当于Person p7=Person(p1);
}

int main()
{
	test();
	system("pause");

	return 0;
}

** 3 操作符operator 例子
class person
{
private:
    int age;
public:
    person(int nAge)
    {
      this->age = nAge;
    }
 
    bool operator==(const person& ps)
    {
      if (this->age == ps.age)
      {
        return true;
      }
        return false;
    }
};
 
int main()
{
    person p1(10);
    person p2(10);
    
    if (p1 == p2)
    {
      cout << "p1 is equal with p2." << endl;
    }
    else
    {
      cout << "p1 is not equal with p2." << endl;
    }
    
    return 0;
}
 







































